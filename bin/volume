#!/usr/bin/env python3

import sys
import subprocess
import re
import os

STEP = 4

USAGE = '''\
USAGE:
{name} <COMMAND>

COMMANDS:
increase - Increase the current volume
decrease - Decrease the current volume
toggle   - Toggle muted state
'''.format(name=os.path.basename(sys.argv[0]))

class CustomException(Exception):
    pass

class UnexpectedOutputError(CustomException):
    def __init__(self, command=None):
        msg = 'Unexpected command output'
        if command:
            msg += ' for command "{}"'.format(command)
        super().__init__(msg)


def get_current_volume():
    process = subprocess.run('amixer get Master'.split(), capture_output=True, text=True)
    lines = process.stdout.split('\n')
    if (len(lines) is not 8):
        raise UnexpectedOutputError('amixer')
    left_info = lines[5]
    words = left_info.split()
    if (len(words) is not 6):
        raise UnexpectedOutputError('amixer')
    volume = words[4]
    return int(re.sub('\[|\]|%', '', volume))

def decrease_volume(amount):
    volume = get_current_volume()
    delta_to_step = volume % amount
    if delta_to_step > 0:
        amount = delta_to_step
    subprocess.run('amixer -q set Master {}%-'.format(amount).split())

def increase_volume(amount):
    volume = get_current_volume()
    amount = amount - (volume % amount)
    subprocess.run('amixer -q set Master {}%+'.format(amount).split())

def toggle_mute():
    subprocess.run('amixer -q set Master toggle'.split())

if __name__ == '__main__':
    commands = {
        'increase': lambda : increase_volume(STEP),
        'decrease': lambda : decrease_volume(STEP),
        'toggle': toggle_mute,
    }
    if len(sys.argv) is not 2:
        print(USAGE, file=sys.stderr)
        sys.exit(1)
    commands[sys.argv[1]]()
